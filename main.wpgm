import wollok.game.*
import juego1.*
import juego2.*
import screamer.*
import general.*

program miniJuego{

	game.title("Minijuegos")

	//Seteamos la altura
	game.height(18)

	//Seteamos el ancho
	game.width(18)

	//Seteamos el tamaÃ±o de la celda
	game.cellSize(40)

	partida1.iniciar()

	//reproducir musica
  	const sonidoFondo = game.sound("sonidoFondo.mp3")
	sonidoFondo.shouldLoop(true)
	game.schedule(0, { sonidoFondo.play()} )

//ALTERNATIVA COMPARANDO COM LA MATRIZ
	keyboard.w().onPressDo({
		const nuevaPosicionY = configuracion.personaje().position().y() + 1
		const nuevaPosicionX = configuracion.personaje().position().x()	
		const objetoMatriz = configuracion.partidaActual().matrizVisuales().get(17-nuevaPosicionY).get(nuevaPosicionX)

		if(objetoMatriz != pn) { // Tenemos una comparacion de objeto y objeto, no?
			configuracion.personaje().posicionProximoCuerpo(configuracion.personaje().position())
			arriba.moverse()
			configuracion.personaje().imagen(configuracion.personaje().imagenArriba())
		}
	})

	// Todo: Tratar de aplicarselos :D
	// keyboard.w.onPressDo({configuracion.personaje().moverseA(arriba)})
	// method moverA(unDireccion) {
	//	const nuevaPosicion = direccion.mover(position)
	//  if(nivel.esValidaLaPosicion(nuevaPosicion))
	//   position = nuevaPosicion
	// }
	// Alternativas: Polimorficas
	// 1: Tus paredes, tenga una colision que permita que el pj vuelva para atras
	//	game.onCollido(self, {elemento => elemento.interactarCon(self)}) 
	// 2: Saber donde tenes un pared, la cual no debes de pisar 
	// method puedoPasar(x, y) = x > topeX 

	keyboard.a().onPressDo({
		const nuevaPosicionY = configuracion.personaje().position().y()
		const nuevaPosicionX = configuracion.personaje().position().x() - 1
		const objetoMatriz = configuracion.partidaActual().matrizVisuales().get(17-nuevaPosicionY).get(nuevaPosicionX)
		
		if(objetoMatriz != pn){
			configuracion.personaje().posicionProximoCuerpo(configuracion.personaje().position())
			izquierda.moverse()
			configuracion.personaje().imagen(configuracion.personaje().imagenIzquierda())
		}
	})

	keyboard.s().onPressDo({
		const nuevaPosicionY = configuracion.personaje().position().y() - 1
		const nuevaPosicionX = configuracion.personaje().position().x()	
		const objetoMatriz = configuracion.partidaActual().matrizVisuales().get(17-nuevaPosicionY).get(nuevaPosicionX)

		if(objetoMatriz != pn){
			configuracion.personaje().posicionProximoCuerpo(configuracion.personaje().position())
			abajo.moverse()
			configuracion.personaje().imagen(configuracion.personaje().imagenAbajo())
		}	
	})

	keyboard.d().onPressDo({
		const nuevaPosicionY = configuracion.personaje().position().y() 
		const nuevaPosicionX = configuracion.personaje().position().x() + 1	
		const objetoMatriz = configuracion.partidaActual().matrizVisuales().get(17-nuevaPosicionY).get(nuevaPosicionX)

		if(objetoMatriz != pn){
			configuracion.personaje().posicionProximoCuerpo(configuracion.personaje().position())
			derecha.moverse()
			configuracion.personaje().imagen(configuracion.personaje().imagenDerecha())
		}
	})

	game.start()
}